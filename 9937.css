.i14b60qv{width:32px;height:32px;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}
/*# sourceMappingURL=data:application/json;base64,*/
.cds-cardPressableStyles-clz0vut{padding:0;}
.ic7twu{width:14px;height:14px;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;border-radius:50%;margin-right:var(--spacing-1);}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9OZXR3b3JrU2VsZWN0aW9uU3ViSGVhZGVyLnRzeCJdLCJuYW1lcyI6WyIuaWM3dHd1Il0sIm1hcHBpbmdzIjoiQUErR2NBIiwiZmlsZSI6Ii93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9OZXR3b3JrU2VsZWN0aW9uU3ViSGVhZGVyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZGVmaW5lTWVzc2FnZXMsIHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJ0BsaW5hcmlhL3JlYWN0JztcbmltcG9ydCB7XG4gIENoYWluRGV0YWlscyxcbiAgdXNlTmV0d29ya1N3aXRjaGVyT3BlbixcbiAgdXNlTmV0d29ya1N3aXRjaGVyVmlld2VkLFxufSBmcm9tICdjYi13YWxsZXQtYW5hbHl0aWNzL3N3YXAnO1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gJ2NiLXdhbGxldC1kYXRhL3N0b3Jlcy9OZXR3b3Jrcy9tb2RlbHMvTmV0d29yayc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9pY29ucy9JY29uJztcbmltcG9ydCB7IEhTdGFjayB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvbGF5b3V0JztcbmltcG9ydCB7IEJveCB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvbGF5b3V0L0JveCc7XG5pbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9vdmVybGF5cy9Ub29sdGlwL1Rvb2x0aXAnO1xuaW1wb3J0IHsgUHJlc3NhYmxlIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9zeXN0ZW0nO1xuaW1wb3J0IHsgc3BhY2luZyB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvdG9rZW5zJztcbmltcG9ydCB7IFRleHRMYWJlbDEgfSBmcm9tICdAY2JocS9jZHMtd2ViL3R5cG9ncmFwaHknO1xuXG5leHBvcnQgY29uc3QgbWVzc2FnZXMgPSBkZWZpbmVNZXNzYWdlcyh7XG4gIGNoYWluRGlzcGxheU5hbWU6IHtcbiAgICBkZWZhdWx0TWVzc2FnZTogJ09uIHtuYW1lfScsXG4gICAgZGVzY3JpcHRpb246ICdDaGFpbiBkaXNwbGF5IG5hbWUnLFxuICB9LFxuICBjaGFpblRpdGxlV2l0aFN1ZmZpeDoge1xuICAgIGRlZmF1bHRNZXNzYWdlOiAne25hbWV9IHtzdWZmaXh9JyxcbiAgICBkZXNjcmlwdGlvbjogJ0NoYWluIGRpc3BsYXkgdGl0bGUgd2l0aCBzdWZmaXgnLFxuICB9LFxuICBjaGFpblRpdGxlOiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICd7bmFtZX0nLFxuICAgIGRlc2NyaXB0aW9uOiAnQ2hhaW4gZGlzcGxheSB0aXRsZScsXG4gIH0sXG4gIHRvb2x0aXBUZXh0OiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdTd2l0Y2ggbmV0d29ya3MnLFxuICAgIGRlc2NyaXB0aW9uOiAnVG9vbHRpcCB0ZXh0JyxcbiAgfSxcbiAgbWFpbm5ldDoge1xuICAgIGRlZmF1bHRNZXNzYWdlOiAnTWFpbm5ldCcsXG4gICAgZGVzY3JpcHRpb246ICdNYWlubmV0IHRleHQnLFxuICB9LFxuICB0ZXN0bmV0OiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdUZXN0bmV0JyxcbiAgICBkZXNjcmlwdGlvbjogJ1Rlc3RuZXQgdGV4dCcsXG4gIH0sXG59KTtcblxudHlwZSBQcm9wcyA9IHtcbiAgbmV0d29yazogTmV0d29yayB8IHVuZGVmaW5lZDtcbiAgb25QcmVzczogKCkgPT4gdm9pZDtcbiAgY2hhaW5EZXRhaWxzOiBDaGFpbkRldGFpbHM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gTmV0d29ya1NlbGVjdGlvblN1YkhlYWRlcih7IG5ldHdvcmssIG9uUHJlc3MsIGNoYWluRGV0YWlscyB9OiBQcm9wcykge1xuICBjb25zdCB7IGZvcm1hdE1lc3NhZ2UgfSA9IHVzZUludGwoKTtcblxuICBjb25zdCB0cmlnZ2VyTmV0d29ya1N3aXRjaGVyT3BlbiA9IHVzZU5ldHdvcmtTd2l0Y2hlck9wZW4oeyBjaGFpbkRldGFpbHMgfSk7XG4gIHVzZU5ldHdvcmtTd2l0Y2hlclZpZXdlZCh7IGNoYWluRGV0YWlscyB9KTtcblxuICBjb25zdCBvbk9wZW5OZXR3b3JrU2VsZWN0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHRyaWdnZXJOZXR3b3JrU3dpdGNoZXJPcGVuKCk7XG4gICAgb25QcmVzcygpO1xuICB9LCBbb25QcmVzcywgdHJpZ2dlck5ldHdvcmtTd2l0Y2hlck9wZW5dKTtcblxuICBpZiAoIW5ldHdvcmspIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IGN1cnJlbnRDaGFpbiA9IG5ldHdvcmsuYXNDaGFpbigpO1xuXG4gIGNvbnN0IG5ldHdvcmtOYW1lID0gZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5jaGFpbkRpc3BsYXlOYW1lLCB7XG4gICAgbmFtZTogY3VycmVudENoYWluPy5kaXNwbGF5TmFtZSxcbiAgfSk7XG5cbiAgY29uc3QgdGl0bGUgPSBjdXJyZW50Q2hhaW4/LmlzVGVzdG5ldFxuICAgID8gZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5jaGFpblRpdGxlV2l0aFN1ZmZpeCwge1xuICAgICAgICBuYW1lOiBuZXR3b3JrTmFtZSxcbiAgICAgICAgc3VmZml4OiBmb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLnRlc3RuZXQpLFxuICAgICAgfSlcbiAgICA6IGZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuY2hhaW5UaXRsZSwge1xuICAgICAgICBuYW1lOiBuZXR3b3JrTmFtZSxcbiAgICAgIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPFByZXNzYWJsZVxuICAgICAgYmFja2dyb3VuZD1cInRyYW5zcGFyZW50XCJcbiAgICAgIG9uUHJlc3M9e29uT3Blbk5ldHdvcmtTZWxlY3Rpb259XG4gICAgICB0ZXN0SUQ9XCJuZXR3b3JrLXNlbGVjdGlvbi1zdWItaGVhZGVyXCJcbiAgICA+XG4gICAgICA8Qm94IGFsaWduSXRlbXM9XCJjZW50ZXJcIiBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiPlxuICAgICAgICA8VG9vbHRpcCBjb250ZW50PXtmb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLnRvb2x0aXBUZXh0KX0gcGxhY2VtZW50PVwiYm90dG9tXCI+XG4gICAgICAgICAgPEhTdGFja1xuICAgICAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiXG4gICAgICAgICAgICBiYWNrZ3JvdW5kPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIGJvcmRlclJhZGl1cz1cInJvdW5kZWRGdWxsXCJcbiAgICAgICAgICAgIHNwYWNpbmdIb3Jpem9udGFsPXsxfVxuICAgICAgICAgICAgZmxleFNocmluaz17MX1cbiAgICAgICAgICAgIGhlaWdodD17Mjh9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2N1cnJlbnRDaGFpbj8uY2hhaW5JbWFnZVVybCA/IChcbiAgICAgICAgICAgICAgPEltYWdlIHNyYz17Y3VycmVudENoYWluPy5jaGFpbkltYWdlVXJsfSBhbHQ9e2Ake2N1cnJlbnRDaGFpbj8uZGlzcGxheU5hbWV9IGljb25gfSAvPlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICA8SFN0YWNrIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgPFRleHRMYWJlbDEgdGVzdElEPVwibmV0d29yay1zZWxlY3Rpb24tY3VycmVudC1uZXR3b3JrXCIgYXM9XCJwXCIgY29sb3I9XCJmb3JlZ3JvdW5kXCI+XG4gICAgICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgICAgICA8L1RleHRMYWJlbDE+XG4gICAgICAgICAgICAgIDxJY29uIG5hbWU9XCJjYXJldFJpZ2h0XCIgc2l6ZT1cInhzXCIgY29sb3I9XCJmb3JlZ3JvdW5kXCIgc3BhY2luZ1N0YXJ0PXswLjV9IC8+XG4gICAgICAgICAgICA8L0hTdGFjaz5cbiAgICAgICAgICA8L0hTdGFjaz5cbiAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgPC9Cb3g+XG4gICAgPC9QcmVzc2FibGU+XG4gICk7XG59XG5cbmNvbnN0IEltYWdlID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6IDE0cHg7XG4gIGhlaWdodDogMTRweDtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgbWFyZ2luLXJpZ2h0OiAke3NwYWNpbmdbMV19O1xuYDtcbiJdfQ==*/
.s1yu1oz6{color:var(--primary);font-size:62px;}
.c4asnyq{max-width:var(--c4asnyq-0);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:relative;-webkit-transform:scale(var(--c4asnyq-1));-ms-transform:scale(var(--c4asnyq-1));transform:scale(var(--c4asnyq-1));}
.srdcbwi.c4asnyq{-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;-webkit-transform-origin:left;-ms-transform-origin:left;transform-origin:left;}
.i1as142y{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}
.s1cg1i7p{width:var(--s1cg1i7p-0);padding:0;margin:0;box-shadow:none;border:none;overflow:hidden;outline:none;color:var(--primary);font-family:CoinbaseSans;font-size:62px;text-align:right;background-color:var(--background);}.s1cg1i7p::-webkit-input-placeholder{color:var(--primary);line-height:normal;opacity:1;}.s1cg1i7p::-moz-placeholder{color:var(--primary);line-height:normal;opacity:1;}.s1cg1i7p:-ms-input-placeholder{color:var(--primary);line-height:normal;opacity:1;}.s1cg1i7p::placeholder{color:var(--primary);line-height:normal;opacity:1;}
.sel4t34.s1cg1i7p{font-size:64px;}
.s1agtbqe{font-family:CoinbaseSans;font-size:62px;text-align:left;position:absolute;bottom:0;right:0;visibility:hidden;}
.s1cdrkpb.s1agtbqe{font-size:64px;}
/*# sourceMappingURL=data:application/json;base64,*/
.t70pwom{display:inline-block;margin:0 0 0 4px;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9UeEVycm9yL1R4RXJyb3IudHN4Il0sIm5hbWVzIjpbIi50NzBwd29tIl0sIm1hcHBpbmdzIjoiQUEwRnFCQSIsImZpbGUiOiIvd29ya3NwYWNlcy9saWJzL3dhbGxldC1jZHMtZXh0ZW5zaW9uL2NvbXBvbmVudHMvVHhFcnJvci9UeEVycm9yLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBkZWZpbmVNZXNzYWdlcywgdXNlSW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGxpbmFyaWEvY29yZSc7XG5pbXBvcnQgeyBRdW90ZUVycm9yIH0gZnJvbSAnY2Itd2FsbGV0LWRhdGEvc3RvcmVzL1N3YXAvYXBpL3VzZVN3YXBRdW90ZSc7XG5pbXBvcnQgeyBlcnJvck1lc3NhZ2VzIH0gZnJvbSAnY2Itd2FsbGV0LWRhdGEvc3RvcmVzL1N3YXAvY29uc3RhbnRzJztcbmltcG9ydCB7IEdlbmVyYXRlVHJhbnNhY3Rpb25zRXJyb3IgfSBmcm9tICdjYi13YWxsZXQtZGF0YS9zdG9yZXMvU3dhcC9ob29rcy91c2VHZW5lcmF0ZVRyYW5zYWN0aW9ucyc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2xvZGFzaC9jYW1lbENhc2UnO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvaWNvbnMnO1xuaW1wb3J0IHsgQm94LCBIU3RhY2sgfSBmcm9tICdAY2JocS9jZHMtd2ViL2xheW91dCc7XG5pbXBvcnQgeyBUZXh0TGVnYWwgfSBmcm9tICdAY2JocS9jZHMtd2ViL3R5cG9ncmFwaHknO1xuXG5jb25zdCBtZXNzYWdlczogUmVjb3JkPHN0cmluZywgYW55PiA9IGRlZmluZU1lc3NhZ2VzKHtcbiAgbm90RW5vdWdoQmFsYW5jZUZvck1pbmVyRmVlVG9vbHRpcDoge1xuICAgIGRlZmF1bHRNZXNzYWdlOiAnVGhlIG5ldHdvcmsgZmVlIGRvZXNu4oCZdCBnbyB0byBDb2luYmFzZSBhbmQgaXQgbWF5IGJlIGxlc3MgdGhhbiBvdXIgZXN0aW1hdGUuJyxcbiAgICBkZXNjcmlwdGlvbjogJ1Rvb2x0aXAgZXhwbGFpbmluZyB0aGUgbm90IGVub3VnaCBiYWxhbmNlIGZvciBtaW5lciBmZWUgZXJyb3IgbWVzc2FnZScsXG4gIH0sXG4gIHplcm9CYWxhbmNlRm9yTWluZXJGZWVUb29sdGlwOiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdBZGQge2NyeXB0b1N5bWJvbH0gdG8geW91ciB3YWxsZXQgb3Igc3dpdGNoIHRvIGFub3RoZXIgbmV0d29yay4nLFxuICAgIGRlc2NyaXB0aW9uOiAnVG9vbHRpcCBleHBsYWluaW5nIHRoZSB6ZXJvIGJhbGFuY2UgZm9yIG1pbmVyIGZlZSBlcnJvciBtZXNzYWdlJyxcbiAgfSxcbiAgZ2VuZXJpY0Vycm9yOiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdTb21ldGhpbmcgd2VudCB3cm9uZycsXG4gICAgZGVzY3JpcHRpb246ICdNZXNzYWdlIHRvIGJlIGRpc3BsYXllZCBhcyBhbiBnZW5lcmljIGVycm9yJyxcbiAgfSxcbiAgbGlxdWlkaXR5RXJyb3I6IHtcbiAgICBkZWZhdWx0TWVzc2FnZTogJ05vdCBlbm91Z2ggbGlxdWlkaXR5IGZvdW5kIGZvciB0aGlzIGFzc2V0IHBhaXIuIFRyeSBhZ2FpbiBsYXRlci4nLFxuICAgIGRlc2NyaXB0aW9uOiAnTWVzc2FnZSB0byBiZSBkaXNwbGF5ZWQgZm9yIGEgbGlxdWlkaXR5IGVycm9yJyxcbiAgfSxcbn0pO1xuXG50eXBlIFByb3BzID0ge1xuICB0cmlnZ2VyQW5hbHl0aWNzPzogKCkgPT4gdm9pZDtcbiAgZXJyb3I6IEdlbmVyYXRlVHJhbnNhY3Rpb25zRXJyb3IgfCBRdW90ZUVycm9yO1xuICBoYXNUb29sdGlwPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBUeEVycm9yKHsgZXJyb3IsIHRyaWdnZXJBbmFseXRpY3MsIGhhc1Rvb2x0aXAgPSBmYWxzZSB9OiBQcm9wcykge1xuICBjb25zdCB7IGZvcm1hdE1lc3NhZ2UgfSA9IHVzZUludGwoKTtcblxuICBjb25zdCBlcnJvck1lc3NhZ2U6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChlcnJvcj8uY29kZSA9PT0gJ2Vyckxvd0xpcXVpZGl0eScpIHtcbiAgICAgIHRyaWdnZXJBbmFseXRpY3M/LigpO1xuICAgICAgcmV0dXJuIGZvcm1hdE1lc3NhZ2UobWVzc2FnZXMubGlxdWlkaXR5RXJyb3IpO1xuICAgIH1cbiAgICBpZiAoZXJyb3I/LmNvZGUpIHtcbiAgICAgIGlmIChlcnJvci5jb2RlLmluY2x1ZGVzKCdNaW5lckZlZScpIHx8IGVycm9yLmNvZGUuaW5jbHVkZXMoJ2Ftb3VudFRvb0xvdycpKSB7XG4gICAgICAgIC8vIGVycm9yIG1lc3NhZ2UgaXMgY29taW5nIGZyb20gY2xpZW50IGFuZCBhbHJlYWR5IGZvcm1hdHRlZCBjb3JyZWN0bHlcbiAgICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVycm9yQ29kZSA9IGNhbWVsQ2FzZShlcnJvci5jb2RlKSBhcyBrZXlvZiB0eXBlb2YgZXJyb3JNZXNzYWdlcztcblxuICAgICAgbGV0IG1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VzLnNvbWV0aGluZ1dlbnRXcm9uZztcbiAgICAgIHN3aXRjaCAoZXJyb3JDb2RlKSB7XG4gICAgICAgIGNhc2UgJ3Vuc3VwcG9ydGVkQ2hhaW5JZE1lc3NhZ2UnOlxuICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VzLnVuc3VwcG9ydGVkQ2hhaW5JZE1lc3NhZ2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3VuYWJsZVRvRXN0aW1hdGVHYXMnOlxuICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VzLnVuYWJsZVRvRXN0aW1hdGVHYXM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NpbXVsYXRvcldhcm5pbmcnOlxuICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VzLnNpbXVsYXRvcldhcm5pbmc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RyYWRlTm90U3VwcG9ydGVkJzpcbiAgICAgICAgICBtZXNzYWdlID0gZXJyb3JNZXNzYWdlcy50cmFkZU5vdFN1cHBvcnRlZDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvcm1hdE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuZ2VuZXJpY0Vycm9yKTtcbiAgfSwgW2Vycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UsIGZvcm1hdE1lc3NhZ2UsIHRyaWdnZXJBbmFseXRpY3NdKTtcblxuICByZXR1cm4gKFxuICAgIDxIU3RhY2sgdGVzdElEPVwidHgtZXJyb3JcIj5cbiAgICAgIDxUZXh0TGVnYWwgYXM9XCJkaXZcIiBjb2xvcj1cIm5lZ2F0aXZlXCI+XG4gICAgICAgIHtlcnJvck1lc3NhZ2V9XG4gICAgICAgIHtoYXNUb29sdGlwID8gKFxuICAgICAgICAgIDxCb3ggY2xhc3NOYW1lPXt0b29sdGlwQ2xhc3N9IHRlc3RJRD1cInR4LWVycm9yLXRvb2x0aXBcIj5cbiAgICAgICAgICAgIDxJY29uIG5hbWU9XCJpbmZvXCIgc2l6ZT1cInhzXCIgY29sb3I9XCJuZWdhdGl2ZVwiIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9UZXh0TGVnYWw+XG4gICAgPC9IU3RhY2s+XG4gICk7XG59XG5cbmNvbnN0IHRvb2x0aXBDbGFzcyA9IGNzc2BcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBtYXJnaW46IDAgMCAwIDRweDtcbmA7XG4iXX0=*/
.cds-lottieStyles-l1xkpyop .palette_foreground_stroke{stroke:var(--foreground);}.cds-lottieStyles-l1xkpyop .palette_foreground_fill{fill:var(--foreground);}.cds-lottieStyles-l1xkpyop .palette_foregroundMuted_stroke{stroke:var(--foreground-muted);}.cds-lottieStyles-l1xkpyop .palette_foregroundMuted_fill{fill:var(--foreground-muted);}.cds-lottieStyles-l1xkpyop .palette_background_stroke{stroke:var(--background);}.cds-lottieStyles-l1xkpyop .palette_background_fill{fill:var(--background);}.cds-lottieStyles-l1xkpyop .palette_backgroundAlternate_stroke{stroke:var(--background-alternate);}.cds-lottieStyles-l1xkpyop .palette_backgroundAlternate_fill{fill:var(--background-alternate);}.cds-lottieStyles-l1xkpyop .palette_backgroundInverse_stroke{stroke:var(--background-inverse);}.cds-lottieStyles-l1xkpyop .palette_backgroundInverse_fill{fill:var(--background-inverse);}.cds-lottieStyles-l1xkpyop .palette_backgroundOverlay_stroke{stroke:var(--background-overlay);}.cds-lottieStyles-l1xkpyop .palette_backgroundOverlay_fill{fill:var(--background-overlay);}.cds-lottieStyles-l1xkpyop .palette_line_stroke{stroke:var(--line);}.cds-lottieStyles-l1xkpyop .palette_line_fill{fill:var(--line);}.cds-lottieStyles-l1xkpyop .palette_lineHeavy_stroke{stroke:var(--line-heavy);}.cds-lottieStyles-l1xkpyop .palette_lineHeavy_fill{fill:var(--line-heavy);}.cds-lottieStyles-l1xkpyop .palette_primary_stroke{stroke:var(--primary);}.cds-lottieStyles-l1xkpyop .palette_primary_fill{fill:var(--primary);}.cds-lottieStyles-l1xkpyop .palette_primaryWash_stroke{stroke:var(--primary-wash);}.cds-lottieStyles-l1xkpyop .palette_primaryWash_fill{fill:var(--primary-wash);}.cds-lottieStyles-l1xkpyop .palette_primaryForeground_stroke{stroke:var(--primary-foreground);}.cds-lottieStyles-l1xkpyop .palette_primaryForeground_fill{fill:var(--primary-foreground);}.cds-lottieStyles-l1xkpyop .palette_negative_stroke{stroke:var(--negative);}.cds-lottieStyles-l1xkpyop .palette_negative_fill{fill:var(--negative);}.cds-lottieStyles-l1xkpyop .palette_negativeForeground_stroke{stroke:var(--negative-foreground);}.cds-lottieStyles-l1xkpyop .palette_negativeForeground_fill{fill:var(--negative-foreground);}.cds-lottieStyles-l1xkpyop .palette_negativeWash_stroke{stroke:var(--negative-wash);}.cds-lottieStyles-l1xkpyop .palette_negativeWash_fill{fill:var(--negative-wash);}.cds-lottieStyles-l1xkpyop .palette_positive_stroke{stroke:var(--positive);}.cds-lottieStyles-l1xkpyop .palette_positive_fill{fill:var(--positive);}.cds-lottieStyles-l1xkpyop .palette_positiveForeground_stroke{stroke:var(--positive-foreground);}.cds-lottieStyles-l1xkpyop .palette_positiveForeground_fill{fill:var(--positive-foreground);}.cds-lottieStyles-l1xkpyop .palette_secondary_stroke{stroke:var(--secondary);}.cds-lottieStyles-l1xkpyop .palette_secondary_fill{fill:var(--secondary);}.cds-lottieStyles-l1xkpyop .palette_secondaryForeground_stroke{stroke:var(--secondary-foreground);}.cds-lottieStyles-l1xkpyop .palette_secondaryForeground_fill{fill:var(--secondary-foreground);}.cds-lottieStyles-l1xkpyop .palette_transparent_stroke{stroke:var(--transparent);}.cds-lottieStyles-l1xkpyop .palette_transparent_fill{fill:var(--transparent);}.cds-lottieStyles-l1xkpyop .palette_warning_stroke{stroke:var(--warning);}.cds-lottieStyles-l1xkpyop .palette_warning_fill{fill:var(--warning);}.cds-lottieStyles-l1xkpyop .palette_warningForeground_stroke{stroke:var(--warning-foreground);}.cds-lottieStyles-l1xkpyop .palette_warningForeground_fill{fill:var(--warning-foreground);}

/*# sourceMappingURL=9937.css.map*/