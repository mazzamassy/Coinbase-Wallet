.i147wxg0{display:inline;}
.s46g9zo{-webkit-text-decoration:line-through;text-decoration:line-through;display:inline;}
.i1gnk9ht{cursor:pointer;margin-top:auto;margin-bottom:auto;margin-left:4px;}.i1gnk9ht span:hover{color:var(--primary) !important;}
.s1acmhe{resize:'none';width:100%;padding:var(--spacing-2);border:1px solid var(--line);border-radius:4px;background:var(--background);color:var(--foreground-muted);font-size:var(--body-font-size);font-family:var(--body-font-family);}
/*# sourceMappingURL=data:application/json;base64,*/

/*# sourceMappingURL=1882.css.map*/